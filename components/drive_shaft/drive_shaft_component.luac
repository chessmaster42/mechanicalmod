local PowerLib = require 'lib.power_lib'
local Point3 = _radiant.csg.Point3
local AnimationEffect = require 'radiant.modules.effects.animation_effect'
local log = radiant.log.create_logger('machines')

local DriveShaftComponent = class()

function DriveShaftComponent:__init()
end

function DriveShaftComponent:initialize(entity, json)
	self._entity = entity
	self._sv = self.__saved_variables:get_data()
	if not self._sv._initialized then
		self._sv._initialized = true
		self.__saved_variables:mark_changed()
	else
		self:_restore()
	end
	
	self._render_info = self._entity:add_component('render_info')
	
	self._power_lib = PowerLib()
	
	stonehearth.calendar:set_interval(10,
		function()
			self:_on_tick()
		end
	)
end

function DriveShaftComponent:_restore()
end

function DriveShaftComponent:destroy()
	self._effect = nil
end

function DriveShaftComponent:_on_tick()
	local power_source = self._entity:get_component('mechanicalmod:power_source')
	local power_drain = self._entity:get_component('mechanicalmod:power_drain')
	
	if not power_source or not power_drain then
		return
	end
	
	if not self._power_lib:is_machine_placed(self._entity) then
		return
	end

	power_source:set_is_enabled(true)
	power_drain:set_is_enabled(true)
	
	-- Sync the speed between the dummy drain and source
	power_source:set_speed(power_drain:get_speed())
	
	-- Average out the power between the dummy drain and source
	local average_power_level = (power_source:get_power_level() + power_drain:get_power_level()) / 2
	power_source:set_power_level(average_power_level)
	power_drain:set_power_level(average_power_level)

	local raw_speed = power_source:get_speed()
	if power_source:get_power_level() == 0 then
		raw_speed = raw_speed * 0.90
	end

	local speed_percent = math.max(0, math.min(400, raw_speed))
	speed_percent = speed_percent - (speed_percent % 25)
	if speed_percent >= 100 and speed_percent < 200 then
		speed_percent = 100
	end
	if speed_percent >= 200 and speed_percent < 400 then
		speed_percent = 200
	end
	if speed_percent >= 400 then
		speed_percent = 400
	end
	
	if not self._effect then		
		if speed_percent > 0 then
			self._effect = radiant.effects.run_effect(self._entity, 'work_' .. tostring(speed_percent))
		else
			self._effect = radiant.effects.run_effect(self._entity, 'idle')
		end
	end
	
	if self._effect then
		self._effect:set_finished_cb(
			function()
				self._effect = nil
			end
		)
	end
end
	
return DriveShaftComponent