local PowerLib = require 'lib.power_lib'
local Point3 = _radiant.csg.Point3
local log = radiant.log.create_logger('machines')

local GearBoxComponent = class()

function GearBoxComponent:__init()
end

function GearBoxComponent:initialize(entity, json)
	self._entity = entity
	self._sv = self.__saved_variables:get_data()
	if not self._sv._initialized then
		self._sv.ratio = json.ratio or 1
		self._sv._initialized = true
		self.__saved_variables:mark_changed()
	else
		self:_restore()
	end
	
	self._render_info = self._entity:add_component('render_info')

	self._power_lib = PowerLib()

	self._on_tick_interval = stonehearth.calendar:set_interval('', 50,
		function()
			self:_on_tick()
		end
	)
	self._on_animation_tick_interval = stonehearth.calendar:set_interval('', 200,
		function()
			self:_on_animation_tick()
		end
	)
end

function GearBoxComponent:_restore()
	if not self._sv.ratio then
		self._sv.ratio = 1
		self.__saved_variables:mark_changed()
	end
end

function GearBoxComponent:destroy()
	self._effect = nil
	
	if self._on_tick_interval then
		self._on_tick_interval:destroy()
		self._on_tick_interval = nil
	end
	if self._on_animation_tick_interval then
		self._on_animation_tick_interval:destroy()
		self._on_animation_tick_interval = nil
	end
end

function GearBoxComponent:get_ratio()
	if not self._sv.ratio then
		self._sv.ratio = 1
		self.__saved_variables:mark_changed()
	end
	return self._sv.ratio
end

function GearBoxComponent:set_ratio(ratio)
	if self._sv.ratio == ratio then
		return
	end
	
	self._sv.ratio = ratio
	self.__saved_variables:mark_changed()
end

function GearBoxComponent:_on_tick()
	if not self._power_lib:is_machine_placed(self._entity) then
		return
	end
	
	local power_source = self._entity:get_component('mechanicalmod:power_source')
	local power_drain = self._entity:get_component('mechanicalmod:power_drain')
	
	if not power_source or not power_drain then
		return
	end
	
	power_source:set_is_enabled(true)
	power_drain:set_is_enabled(true)
	
	-- Average out the power between the dummy drain and source
	local average_power_level = (power_source:get_power_level() + power_drain:get_power_level()) / 2
	power_source:set_power_level(average_power_level * self._power_lib:get_friction_multiplier())
	power_drain:set_power_level(average_power_level)

	-- Sync the speed and torque based on the gear ratio
	power_source:set_speed(power_drain:get_speed() * self:get_ratio())
	power_source:set_torque(power_drain:get_torque() / self:get_ratio())
	
	if power_source:get_power_level() < 0.25 then
		power_source:set_torque(power_source:get_torque() * 0.9)
	end
	if power_source:get_power_level() < 0.05 then
		-- Zero out the speed and torque
		power_drain:set_speed(0)
		power_drain:set_torque(0)
		power_source:set_speed(0)
		power_source:set_torque(0)
	end
end

function GearBoxComponent:_on_animation_tick()
	if not self._power_lib:is_machine_placed(self._entity) then
		return
	end
	
	local power_source = self._entity:get_component('mechanicalmod:power_source')
	local speed_percent = math.max(0, math.min(400, power_source:get_speed()))
	if speed_percent > 0 and speed_percent < 25 then
		speed_percent = 10
	else
		speed_percent = speed_percent - (speed_percent % 25)
	end
	if speed_percent >= 100 and speed_percent < 200 then
		speed_percent = 100
	end
	if speed_percent >= 200 and speed_percent < 400 then
		speed_percent = 200
	end
	if speed_percent >= 400 then
		speed_percent = 400
	end

	if not self._effect then		
		if speed_percent > 0 then
			self._effect = radiant.effects.run_effect(self._entity, 'work_' .. tostring(speed_percent))
		else
			self._effect = radiant.effects.run_effect(self._entity, 'idle')
		end
	end
	
	self._effect:set_finished_cb(
		function()
			self._effect = nil
			self:_on_animation_tick()
		end
	)
end

return GearBoxComponent