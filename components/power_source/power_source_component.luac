local PowerLib = require 'lib.power_lib'

local PowerSource = class()

function PowerSource:__init()
end

function PowerSource:initialize(entity, json)
	self._entity = entity
	self._sv = self.__saved_variables:get_data()
	if not self._sv._initialized then
		self._sv.is_enabled = false
		self._sv.stored_power = 0
		if json.power then
			self._sv.rate = math.max(1, json.power.rate or 1)
			self._sv.max_stored_power = math.max(1, json.power.max_stored or 100)
		else
			self._sv.rate = 1
			self._sv.max_stored_power = 100
		end
		self._sv.connectors = json.connectors
		self._sv.view_mode = 0
		self._sv.speed = 0
		self._sv.torque = 0
		self._sv._initialized = true
		self.__saved_variables:mark_changed()
	else
		self:_restore()
	end
	
	self._power_lib = PowerLib()	
	self._power_lib:load_power_api()
	
	stonehearth.power_api:register_power_source(self._entity)
	
	self._on_tick_interval = stonehearth.calendar:set_interval(100,
		function()
			self:_on_tick()
		end
	)
end

function PowerSource:_restore()
	if not self._sv.view_mode then
		self._sv.view_mode = 0
		self.__saved_variables:mark_changed()
	end
	if not self._sv.speed then
		self._sv.speed = 0
		self.__saved_variables:mark_changed()
	end
	if not self._sv.torque then
		self._sv.torque = 0
		self.__saved_variables:mark_changed()
	end
end

function PowerSource:destroy()
	if self._on_tick_interval then
		self._on_tick_interval:destroy()
		self._on_tick_interval = nil
	end
	
	stonehearth.power_api:unregister_power_source(self._entity)
end

function PowerSource:toggle_view_mode()
	if self._sv.view_mode == 0 then
		self._sv.view_mode = 1
		self.__saved_variables:mark_changed()
	else
		self._sv.view_mode = 0
		self.__saved_variables:mark_changed()
	end
end

function PowerSource:get_connectors()
	return self._sv.connectors
end

function PowerSource:set_speed(speed)
	if self._sv.speed == speed then
		return
	end
	
	self._sv.speed = speed
	self.__saved_variables:mark_changed()
end

function PowerSource:get_speed()
	return self._sv.speed
end

function PowerSource:set_torque(torque)
	if self._sv.torque == torque then
		return
	end
	
	self._sv.torque = torque
	self.__saved_variables:mark_changed()
end

function PowerSource:get_torque()
	return self._sv.torque
end

function PowerSource:set_rate(rate)
	if self._sv.rate == rate then
		return
	end
	
	self._sv.rate = rate
	self.__saved_variables:mark_changed()
end

function PowerSource:get_rate()
	return self._sv.rate
end

function PowerSource:get_max_power()
	if not self._sv.max_stored_power then
		self._sv.max_stored_power = 100
		self.__saved_variables:mark_changed()
	end
	return self._sv.max_stored_power
end

function PowerSource:get_power()
	if not self._sv.stored_power then
		self._sv.stored_power = 0
		self.__saved_variables:mark_changed()
	end
	return self._sv.stored_power
end

function PowerSource:add_power(power_to_add)
	local new_power = math.min(self._sv.max_stored_power, self._sv.stored_power + power_to_add)
	if self._sv.stored_power == new_power then
		return 0
	end
	local power_delta = new_power - self._sv.stored_power
	
	self._sv.stored_power = new_power
	self.__saved_variables:mark_changed()
	
	return power_delta
end

function PowerSource:remove_power(power_to_remove)
	local new_power = math.max(0, self._sv.stored_power - power_to_remove)
	if self._sv.stored_power == new_power then
		return 0
	end
	local power_delta = self._sv.stored_power - new_power
	
	self._sv.stored_power = new_power
	self.__saved_variables:mark_changed()
	
	return power_delta
end

function PowerSource:get_power_level()
	return (self:get_power() / self:get_max_power())
end

function PowerSource:set_power_level(percentage)
	if not percentage then
		percentage = 0
	end
	
	-- Clamp the percentage fraction between 0 and 1
	percentage = math.min(1, math.max(0, percentage))
	
	local stored_power = percentage * self._sv.max_stored_power
	if self._sv.stored_power == stored_power then
		return
	end
	
	self._sv.stored_power = stored_power
	self.__saved_variables:mark_changed()
end

function PowerSource:get_is_enabled()
	if not self._sv.is_enabled then
		self._sv.is_enabled = false
		self.__saved_variables:mark_changed()
	end
	return self._sv.is_enabled
end

function PowerSource:set_is_enabled(enabled)
	if self._sv.is_enabled == enabled then
		return
	end
	self._sv.is_enabled = enabled
	self.__saved_variables:mark_changed()
end

function PowerSource:_on_tick()
	if not self._power_lib:is_machine_placed(self._entity) then
		stonehearth.power_api:unregister_power_source(self._entity)
		self:set_power_level(0)
		self:set_speed(0)
		self:set_torque(0)
		return
	end

	if not stonehearth.power_api:is_registered_source(self._entity) then
		stonehearth.power_api:register_power_source(self._entity)
	end
end

return PowerSource