local PowerLib = require 'lib.power_lib'
local Point3 = _radiant.csg.Point3
local log = radiant.log.create_logger('machines')

local ProcessingMachineComponent = class()

function ProcessingMachineComponent:__init()
end

function ProcessingMachineComponent:initialize(entity, json)
	self._entity = entity
	self._sv = self.__saved_variables:get_data()
	if not self._sv._initialized then
		self._sv._initialized = true
		self._sv.material = json.material
		self._sv.product_uri = json.product_uri
		self._sv.restock_action = json.restock_action
		self._sv.inventory_size = json.inventory_size
		self._sv.processing_time = json.processing_time
		self.__saved_variables:mark_changed()
	else
		self:_restore()
	end
	
	self._render_info = self._entity:add_component('render_info')
	self._is_processing = false
	self._processing_delay = nil
	self._processing_task = nil
	
	self._power_lib = PowerLib()
	
	stonehearth.calendar:set_interval(10,
		function()
			self:_on_tick()
		end
	)
end

function ProcessingMachineComponent:_restore()
end

function ProcessingMachineComponent:destroy()
	self._effect = nil
end

function ProcessingMachineComponent:get_material()
	return self._sv.material
end

function ProcessingMachineComponent:get_product_uri()
	return self._sv.product_uri
end

function ProcessingMachineComponent:get_restock_action()
	return self._sv.restock_action
end

function ProcessingMachineComponent:get_inventory_size()
	return self._sv.inventory_size
end

function ProcessingMachineComponent:get_processing_time()
	return self._sv.processing_time
end

function ProcessingMachineComponent:_fill_inventory()
	local resource_count = 0
	radiant.entities.for_all_children(self._entity,
		function(entity)
			--log:error('DEBUG - children - entity=%s;material=%s', tostring(entity), tostring(self:get_material()))
			local is_resource = radiant.entities.is_material(entity, self:get_material())
			if is_resource then
				resource_count = resource_count + 1
			end
		end
	)
	
	-- If we are not full, schedule a task to have more brought in
	if resource_count <= self:get_inventory_size() and not self._processing_task then
		local town = stonehearth.town:get_town(self._entity)
		self._processing_task = town:create_task_for_group('stonehearth:task_group:restock', self:get_restock_action()):set_priority(stonehearth.constants.priorities.simple_labor.PLACE_ITEM):once():start()
		self._processing_task:notify_completed(
			function()
				self._processing_task = nil
			end
		)
	end
end

function ProcessingMachineComponent:_process_resources()
	local first_resource = nil
	radiant.entities.for_all_children(self._entity,
		function(entity)
			if first_resource then
				return
			end
			local is_resource = radiant.entities.is_material(entity, self:get_material())
			if is_resource then
				if not first_resource then
					first_resource = entity
				end
			end
		end
	)
	
	if first_resource and not self._is_processing then
		self._is_processing = true
		radiant.entities.remove_child(self._entity, first_resource)
		radiant.entities.destroy_entity(first_resource)
		
		self._processing_delay = stonehearth.calendar:set_interval(self:get_processing_time() * 200,
			function()
				local origin = radiant.entities.get_world_grid_location(self._entity)
				if not origin then
					return
				end
				local location = radiant.terrain.find_placement_point(origin, 2, 4)
				local item = radiant.entities.create_entity(self:get_product_uri(), {owner = self._entity})
				radiant.terrain.place_entity(item, location)
				
				-- TODO - Create task to restock the product into stockpiles
				
				self._is_processing = false
				
				self._processing_delay:destroy()
				self._processing_delay = nil
			end
		)
	end
end

function ProcessingMachineComponent:_on_tick()
	if not self._power_lib:is_machine_placed(self._entity) then
		return
	end
	
	local power_drain = self._entity:get_component('mechanicalmod:power_drain')
	if not power_drain then
		return
	end
	
	power_drain:set_is_enabled(true)
	
	-- Calculate which animation to use based on the power level
	local power_level = math.max(0, math.min(100, power_drain:get_speed()))
	local percent = power_level - (power_level % 25)
	local effect_name = 'work_' .. tostring(percent)
	
	if power_drain:get_speed() == 0 then
		effect_name = 'idle'
	end
	
	if not self._effect then
		self._effect = radiant.effects.run_effect(self._entity, effect_name):set_cleanup_on_finish(true)
	end
	
	self._effect:set_finished_cb(
		function()
			self._effect = nil
			
			-- Consume power and process resources as long as there was enough power
			local delta = power_drain:remove_power(20)
			if delta == 20 then
				self:_process_resources()
			else
				power_drain:add_power(delta)
				power_drain:set_speed(power_drain:get_speed() * 0.90)
				power_drain:set_torque(power_drain:get_torque() * 0.90)
			end
		end
	)
	
	--power_drain:remove_power(power_drain:get_rate() / 20)
	
	self:_fill_inventory()
end
	
return ProcessingMachineComponent