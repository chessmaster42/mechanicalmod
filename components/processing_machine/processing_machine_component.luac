local PowerLib = require 'lib.power_lib'
local Point3 = _radiant.csg.Point3
local log = radiant.log.create_logger('machines')

local ProcessingMachineComponent = class()

function ProcessingMachineComponent:__init()
end

function ProcessingMachineComponent:initialize(entity, json)
	self._entity = entity
	self._sv = self.__saved_variables:get_data()
	if not self._sv._initialized then
		self._sv._initialized = true
		
		self._sv.material = json.material
		self._sv.product_uri = json.product_uri
		self._sv.inventory_size = json.inventory_size
		self._sv.processing_time = json.processing_time
		self._sv.power = json.power
		
		self.__saved_variables:mark_changed()
	else
		self:_restore()
	end
	
	self._render_info = self._entity:add_component('render_info')
	self._is_processing = false
	self._processing_delay = nil
	self._processing_task = nil
	
	self._power_lib = PowerLib()
	
	self._on_tick_interval = stonehearth.calendar:set_interval('', 100,
		function()
			self:_on_tick()
		end
	)
	self._on_animation_tick_interval = stonehearth.calendar:set_interval('', 200,
		function()
			self:_on_animation_tick()
		end
	)
	
	radiant.events.listen_once(entity, 'radiant:entity:pre_destroy',
		function()
			-- Upon destruction make sure all attached resources get dumped out onto the ground
			radiant.entities.for_all_children(self._entity,
				function(entity)
					local origin = radiant.entities.get_world_grid_location(self._entity)
					local location = radiant.terrain.find_placement_point(origin, 2, 6)
					if not location then
						location = radiant.terrain.find_placement_point(origin, 6, 12)
					end
					radiant.entities.remove_child(self._entity, entity)
					if location then
						radiant.terrain.place_entity(entity, location)
					end
				end
			)
		end
	)
end

function ProcessingMachineComponent:_restore()
end

function ProcessingMachineComponent:destroy()
	if self._effect then
		self._effect:stop()
		self._effect = nil
	end
	
	if self._on_tick_interval then
		self._on_tick_interval:destroy()
		self._on_tick_interval = nil
	end
	if self._on_animation_tick_interval then
		self._on_animation_tick_interval:destroy()
		self._on_animation_tick_interval = nil
	end
end

function ProcessingMachineComponent:get_power_rate()
	if not self._sv.power then
		self._sv.power = {}
		self.__saved_variables:mark_changed()
	end
	if not self._sv.power.rate then
		self._sv.power.rate = 10.0
		self.__saved_variables:mark_changed()
	end
	
	return self._sv.power.rate
end

function ProcessingMachineComponent:get_min_speed()
	if not self._sv.power then
		self._sv.power = {}
		self.__saved_variables:mark_changed()
	end
	if not self._sv.power.min_speed then
		self._sv.power.min_speed = 50
		self.__saved_variables:mark_changed()
	end
	
	return self._sv.power.min_speed
end

function ProcessingMachineComponent:get_min_torque()
	if not self._sv.power then
		self._sv.power = {}
		self.__saved_variables:mark_changed()
	end
	if not self._sv.power.min_torque then
		self._sv.power.min_torque = 50
		self.__saved_variables:mark_changed()
	end
	
	return self._sv.power.min_torque
end

function ProcessingMachineComponent:get_material()
	return self._sv.material
end

function ProcessingMachineComponent:get_product_uri()
	return self._sv.product_uri
end

function ProcessingMachineComponent:get_inventory_size()
	return self._sv.inventory_size
end

function ProcessingMachineComponent:get_processing_time()
	return self._sv.processing_time
end

function ProcessingMachineComponent:_fill_inventory()
	local town = stonehearth.town:get_town(self._entity)
	if not town then
		return
	end
	
	local resource_count = 0
	radiant.entities.for_all_children(self._entity,
		function(entity)
			local is_resource = radiant.entities.is_material(entity, self:get_material())
			if is_resource then
				resource_count = resource_count + 1
			end
		end
	)
	
	-- If we are not full, schedule a task to have more brought in
	if resource_count <= self:get_inventory_size() and not self._processing_task then
		--log:error('DEBUG - Processing Machine - Scheduling ingredients delivery of %s ...', tostring(self:get_material()))
		
		local args = {}
		args.material = self:get_material()
		args.entity = self._entity
		self._processing_task = town:create_task_for_group('stonehearth:task_group:restock', 'mechanicalmod:deliver_material', args):set_priority(stonehearth.constants.priorities.simple_labor.PLACE_ITEM):once():start()
		self._processing_task:notify_completed(
			function()
				self._processing_task = nil
			end
		)
	end
end

function ProcessingMachineComponent:_process_resources()
	local first_resource = nil
	radiant.entities.for_all_children(self._entity,
		function(entity)
			if first_resource then
				return
			end
			local is_resource = radiant.entities.is_material(entity, self:get_material())
			if is_resource then
				if not first_resource then
					first_resource = entity
				end
			end
		end
	)
	
	if first_resource and not self._is_processing then
		self._is_processing = true
		radiant.entities.remove_child(self._entity, first_resource)
		radiant.entities.destroy_entity(first_resource)
		
		self._processing_delay = stonehearth.calendar:set_timer('mechanicalmod resource processing delay', self:get_processing_time() * 200,
			function()
				local origin = radiant.entities.get_world_grid_location(self._entity)
				if not origin then
					return
				end
				local location = radiant.terrain.find_placement_point(origin, 2, 4)
				local item = radiant.entities.create_entity(self:get_product_uri(), {owner = self._entity})
				radiant.terrain.place_entity(item, location)
				
				self._is_processing = false
				
				self._processing_delay:destroy()
				self._processing_delay = nil
			end
		)
	end
end

function ProcessingMachineComponent:_on_tick()
	if not self._power_lib:is_machine_placed(self._entity) then
		return
	end
	
	local power_drain = self._entity:get_component('mechanicalmod:power_drain')
	if not power_drain then
		return
	end
	
	power_drain:set_is_enabled(true)
	
	self:_fill_inventory()
	
	if power_drain:get_power_level() < 0.05 then
		power_drain:set_speed(0)
		power_drain:set_torque(0)
	end
end
	
function ProcessingMachineComponent:_on_animation_tick()
	if not self._power_lib:is_machine_placed(self._entity) then
		return
	end
	
	local power_drain = self._entity:get_component('mechanicalmod:power_drain')
	local speed_percent = math.max(0, math.min(400, power_drain:get_speed()))
	if speed_percent > 0 and speed_percent < 25 then
		speed_percent = 10
	else
		speed_percent = speed_percent - (speed_percent % 25)
	end
	if speed_percent >= 100 and speed_percent < 200 then
		speed_percent = 100
	end
	if speed_percent >= 200 and speed_percent < 400 then
		speed_percent = 200
	end
	if speed_percent >= 400 then
		speed_percent = 400
	end

	if power_drain:get_speed() < self:get_min_speed() or power_drain:get_torque() < self:get_min_torque() then
		speed_percent = 0
	end
	
	if not self._effect then		
		if speed_percent > 0 then
			self._effect = radiant.effects.run_effect(self._entity, 'work_' .. tostring(speed_percent))
		else
			self._effect = radiant.effects.run_effect(self._entity, 'idle')
		end
	end
	
	self._effect:set_finished_cb(
		function()
			self._effect = nil
			self:_on_animation_tick()
			
			-- Consume power and process resources as long as there was enough power
			local delta = power_drain:remove_power(self:get_power_rate())
			if delta == self:get_power_rate() and speed_percent > 0 then
				self:_process_resources()
			else
				power_drain:add_power(delta)
			end
		end
	)
end

return ProcessingMachineComponent