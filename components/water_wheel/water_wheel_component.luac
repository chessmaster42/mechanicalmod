local PowerLib = require 'lib.power_lib'
local Point3 = _radiant.csg.Point3
local log = radiant.log.create_logger('machines')

local WaterWheelComponent = class()

function WaterWheelComponent:__init()
end

function WaterWheelComponent:initialize(entity, json)
	self._entity = entity
	self._sv = self.__saved_variables:get_data()
	if not self._sv._initialized then
		self._sv._initialized = true
		self.__saved_variables:mark_changed()
	else
		self:_restore()
	end
	
	self._render_info = self._entity:add_component('render_info')
	
	self._power_lib = PowerLib()
	
	self._on_tick_interval = stonehearth.calendar:set_interval(10,
		function()
			self:_on_tick()
		end
	)
	self._on_animation_tick_interval = stonehearth.calendar:set_interval(200,
		function()
			self:_on_animation_tick()
		end
	)
end

function WaterWheelComponent:_restore()
end

function WaterWheelComponent:destroy()
	self._effect = nil
	
	if self._on_tick_interval then
		self._on_tick_interval:destroy()
		self._on_tick_interval = nil
	end
	if self._on_animation_tick_interval then
		self._on_animation_tick_interval:destroy()
		self._on_animation_tick_interval = nil
	end
end

function WaterWheelComponent:_get_water_body()
	local water = nil
	local location = radiant.entities.get_world_grid_location(self._entity)
	if not location then
		return nil
	end
	
	-- TODO - This is a VERY lazy way to find the water body. Come up with something better later
	local y = location.y - 1
	for x = (location.x - 1),(location.x + 1) do
		for z = (location.z - 1),(location.z + 1) do
			if x == 0 and z == 0 then
			else
				local new_pos = Point3(x, y, z)
				water = stonehearth.hydrology:get_water_body(new_pos)
			end
		end
	end
	
	return water
end

function WaterWheelComponent:_get_water_flow_rate()
	local water_body = self:_get_water_body()
	if not water_body then
		return 0
	end
	
	local channel_manager = stonehearth.hydrology:get_channel_manager()
	local channels = channel_manager:get_channels(water_body)
	
	local total_flow_rate = 0
	for _,channel in pairs(channels) do
		local flow_rate = channel_manager:calculate_channel_flow_rate(channel)
		total_flow_rate = total_flow_rate + flow_rate
	end
	
	return total_flow_rate
end

function WaterWheelComponent:_on_tick()
	if not self._power_lib:is_machine_placed(self._entity) then
		return
	end
	
	local power_source = self._entity:add_component('mechanicalmod:power_source')
	if not power_source then
		return
	end
	
	self._flow_rate = self:_get_water_flow_rate()
	
	power_source:set_is_enabled(true)
	power_source:add_power(self._flow_rate * 8)
	power_source:set_speed(50 * self._flow_rate)
	power_source:set_torque(150 * self._flow_rate)
end

function WaterWheelComponent:_on_animation_tick()
	if not self._power_lib:is_machine_placed(self._entity) then
		return
	end
	
	local power_source = self._entity:get_component('mechanicalmod:power_source')
	local speed_percent = math.max(0, math.min(100, power_source:get_speed()))
	speed_percent = speed_percent - (speed_percent % 25)

	if not self._effect then		
		if speed_percent > 0 then
			self._effect = radiant.effects.run_effect(self._entity, 'work_' .. tostring(speed_percent))
		else
			self._effect = radiant.effects.run_effect(self._entity, 'idle')
		end
	end
	
	self._effect:set_finished_cb(
		function()
			self._effect = nil
			self:_on_animation_tick()
		end
	)
end

return WaterWheelComponent